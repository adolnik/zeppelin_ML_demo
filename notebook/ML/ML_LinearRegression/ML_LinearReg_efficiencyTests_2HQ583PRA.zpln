{
  "paragraphs": [
    {
      "text": "%python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.datasets import load_boston\nfrom sklearn.metrics import mean_squared_error, f1_score, accuracy_score, roc_curve, roc_auc_score\nfrom sklearn.model_selection import train_test_split\n\nfrom matplotlib import pyplot as plt",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.351",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688351_1070814463",
      "id": "20230129-091448_1273109288",
      "dateCreated": "2023-01-29 09:14:48.351",
      "status": "READY"
    },
    {
      "text": "%md\n### 2.1.Когда использовать матричные операции вместо градиентного спуска в линейной регрессии",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.352",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e2.1.Когда использовать матричные операции вместо градиентного спуска в линейной регрессии\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688352_166970862",
      "id": "20230129-091448_1573288220",
      "dateCreated": "2023-01-29 09:14:48.352",
      "status": "READY"
    },
    {
      "text": "%python\ndef print_regression_metrics(y_true, y_pred):\n    mse \u003d mean_squared_error(y_true, y_pred)\n    rmse \u003d np.sqrt(mse)\n    print(f\u0027MSE \u003d {mse:.2f}, RMSE \u003d {rmse:.2f}\u0027)\n    \ndef prepare_boston_data():\n    data \u003d load_boston()\n    X, y \u003d data[\u0027data\u0027], data[\u0027target\u0027]\n    # Нормализовать даннные с помощью стандартной нормализации\n    X \u003d (X - X.mean(axis\u003d0)) / X.std(axis\u003d0)\n    # Добавить фиктивный столбец единиц (bias линейной модели)\n    X \u003d np.hstack([np.ones(X.shape[0])[:, np.newaxis], X])\n    \n    return X, y",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.352",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688352_1734115432",
      "id": "20230129-091448_346776478",
      "dateCreated": "2023-01-29 09:14:48.352",
      "status": "READY"
    },
    {
      "text": "%md\nПрежде чем начать, обернем написанную нами линейную регрессию методом матричных операций в класс:",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.352",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eПрежде чем начать, обернем написанную нами линейную регрессию методом матричных операций в класс:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688352_510212245",
      "id": "20230129-091448_614367644",
      "dateCreated": "2023-01-29 09:14:48.352",
      "status": "READY"
    },
    {
      "text": "%python\nclass LinRegAlgebra():\n    def __init__(self):\n        self.theta \u003d None\n    \n    def fit(self, X, y):\n        self.theta \u003d np.linalg.inv(X.transpose().dot(X)).dot(X.transpose()).dot(y)\n    \n    def predict(self, X):\n        return X.dot(self.theta)",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.352",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688352_2134534145",
      "id": "20230129-091448_798595775",
      "dateCreated": "2023-01-29 09:14:48.352",
      "status": "READY"
    },
    {
      "text": "%md\nПроведем замеры скорости работы алгоритмов на матричных операциях и на градиентном спуске. Предварительно найдем параметры для метода, основанного на градиентном спуске, так, чтобы значения метрик максимально совпадало со значениями в случае первого алгоритма.",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.352",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eПроведем замеры скорости работы алгоритмов на матричных операциях и на градиентном спуске. Предварительно найдем параметры для метода, основанного на градиентном спуске, так, чтобы значения метрик максимально совпадало со значениями в случае первого алгоритма.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688352_1101627570",
      "id": "20230129-091448_1886077169",
      "dateCreated": "2023-01-29 09:14:48.352",
      "status": "READY"
    },
    {
      "text": "%python\nX, y \u003d prepare_boston_data()",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.353",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688353_1394338118",
      "id": "20230129-091448_1058237169",
      "dateCreated": "2023-01-29 09:14:48.353",
      "status": "READY"
    },
    {
      "text": "%python\nlinreg_alg \u003d LinRegAlgebra()\nlinreg_alg.fit(X, y)\ny_pred \u003d linreg_alg.predict(X)\n\n# Посчитать значение ошибок MSE и RMSE для тренировочных данных\nprint_regression_metrics(y, y_pred)",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.353",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "MSE \u003d 21.89, RMSE \u003d 4.68\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688353_715641071",
      "id": "20230129-091448_1876004590",
      "dateCreated": "2023-01-29 09:14:48.353",
      "status": "READY"
    },
    {
      "text": "%python\nclass RegOptimizer():\n    def __init__(self, alpha, n_iters):\n        self.theta \u003d None\n        self._alpha \u003d alpha\n        self._n_iters \u003d n_iters\n    \n    def gradient_step(self, theta, theta_grad):\n        return theta - self._alpha * theta_grad\n    \n    def grad_func(self, X, y, theta):\n        raise NotImplementedError()\n\n    def optimize(self, X, y, start_theta, n_iters):\n        theta \u003d start_theta.copy()\n\n        for i in range(n_iters):\n            theta_grad \u003d self.grad_func(X, y, theta)\n            theta \u003d self.gradient_step(theta, theta_grad)\n\n        return theta\n    \n    def fit(self, X, y):\n        m \u003d X.shape[1]\n        start_theta \u003d np.ones(m)\n        self.theta \u003d self.optimize(X, y, start_theta, self._n_iters)\n        \n    def predict(self, X):\n        raise NotImplementedError()",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.353",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688353_2120046598",
      "id": "20230129-091448_218021321",
      "dateCreated": "2023-01-29 09:14:48.353",
      "status": "READY"
    },
    {
      "text": "%python\nclass LinReg(RegOptimizer):\n    def grad_func(self, X, y, theta):\n        n \u003d X.shape[0]\n        grad \u003d 1. / n * X.transpose().dot(X.dot(theta) - y)\n\n        return grad\n    \n    def predict(self, X):\n        if self.theta is None:\n            raise Exception(\u0027You should train the model first\u0027)\n        \n        y_pred \u003d X.dot(self.theta)\n        \n        return y_pred",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.353",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688353_782206866",
      "id": "20230129-091448_649594991",
      "dateCreated": "2023-01-29 09:14:48.353",
      "status": "READY"
    },
    {
      "text": "%python\nlinreg_crit \u003d LinReg(0.2,1000)\nlinreg_crit.fit(X, y)\ny_pred \u003d linreg_crit.predict(X)\n\n# Посчитать значение ошибок MSE и RMSE для тренировочных данных\nprint_regression_metrics(y, y_pred)",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.353",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "MSE \u003d 21.90, RMSE \u003d 4.68\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688353_1906300419",
      "id": "20230129-091448_47757995",
      "dateCreated": "2023-01-29 09:14:48.353",
      "status": "READY"
    },
    {
      "text": "%python\n%timeit linreg_alg.fit(X, y)",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.353",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "313 µs ± 111 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688353_983406272",
      "id": "20230129-091448_1629352672",
      "dateCreated": "2023-01-29 09:14:48.353",
      "status": "READY"
    },
    {
      "text": "%python\n%timeit linreg_crit.fit(X, y)",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.353",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "53.4 ms ± 16.1 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688353_94598183",
      "id": "20230129-091448_410258431",
      "dateCreated": "2023-01-29 09:14:48.353",
      "status": "READY"
    },
    {
      "text": "%python\nlinreg_crit.fit(X, y)",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.353",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688353_1114517957",
      "id": "20230129-091448_2129236974",
      "dateCreated": "2023-01-29 09:14:48.353",
      "status": "READY"
    },
    {
      "text": "%md\nКак видно из результатов эксперимента, реализация на матричных операциях опережает реализацию на градиентном спуске в 500 раз. Но всегда ли это так и какие подводные камни могут быть? Ниже приведен набор случаев, при которых версия с градентным спуском предпочтительнее:\n\n1. Градиентный спуск работает быстрее в случае матриц с большим количеством признаков. Основная по сложности операция — нахождение обратной матрицы $(X^T X)^{-1}$.\n1. Нахождение обратной матрицы может также потребовать больше оперативной памяти, что иногда является не приемлемым.\n1. Матричные операции могут также проигрывать и в случае небольших объемов данных, но при плохой параллельной реализации или недостаточных ресурсах.\n1. Градиентный спуск может быть усовершенствован до так называемого **стохастического градиентного спуска**, при котором данные для оптимизации подгружаются небольшими наборами, что уменьшает требования по памяти.\n1. В некоторых случаях (например, в случае линейно-зависимых строк) алгебраический способ решения не будет работать совсем в виду невозможности найти обратную матрицу.",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.354",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eКак видно из результатов эксперимента, реализация на матричных операциях опережает реализацию на градиентном спуске в 500 раз. Но всегда ли это так и какие подводные камни могут быть? Ниже приведен набор случаев, при которых версия с градентным спуском предпочтительнее:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003eГрадиентный спуск работает быстрее в случае матриц с большим количеством признаков. Основная по сложности операция — нахождение обратной матрицы $(X^T X)^{-1}$.\u003c/li\u003e\n  \u003cli\u003eНахождение обратной матрицы может также потребовать больше оперативной памяти, что иногда является не приемлемым.\u003c/li\u003e\n  \u003cli\u003eМатричные операции могут также проигрывать и в случае небольших объемов данных, но при плохой параллельной реализации или недостаточных ресурсах.\u003c/li\u003e\n  \u003cli\u003eГрадиентный спуск может быть усовершенствован до так называемого \u003cstrong\u003eстохастического градиентного спуска\u003c/strong\u003e, при котором данные для оптимизации подгружаются небольшими наборами, что уменьшает требования по памяти.\u003c/li\u003e\n  \u003cli\u003eВ некоторых случаях (например, в случае линейно-зависимых строк) алгебраический способ решения не будет работать совсем в виду невозможности найти обратную матрицу.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688353_802847846",
      "id": "20230129-091448_967009146",
      "dateCreated": "2023-01-29 09:14:48.354",
      "status": "READY"
    },
    {
      "text": "%md\n### 2.2. Превращение линейной модели в нелинейную",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.354",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e2.2. Превращение линейной модели в нелинейную\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688354_1682442039",
      "id": "20230129-091448_290099301",
      "dateCreated": "2023-01-29 09:14:48.354",
      "status": "READY"
    },
    {
      "text": "%md\nНелинейные зависимости в данных встречаются намного чаще линейных. На самом деле простейшая линейная регрессия способна обнаруживать нелинейные зависимости. Для этого необходимо рассмотреть дополнительные признаки, полученные из исходных применением различных нелинейных функций. Возьмем уже знакомый датасет с ценами на квартиры в Бостоне и последовательно станем применять различные функции к исходным признакам:",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.354",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eНелинейные зависимости в данных встречаются намного чаще линейных. На самом деле простейшая линейная регрессия способна обнаруживать нелинейные зависимости. Для этого необходимо рассмотреть дополнительные признаки, полученные из исходных применением различных нелинейных функций. Возьмем уже знакомый датасет с ценами на квартиры в Бостоне и последовательно станем применять различные функции к исходным признакам:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688354_195422348",
      "id": "20230129-091448_1780853464",
      "dateCreated": "2023-01-29 09:14:48.354",
      "status": "READY"
    },
    {
      "text": "%md\nBoston Data. Attribute Information (in order):\n    - CRIM     per capita crime rate by town\n    - ZN       proportion of residential land zoned for lots over 25,000 sq.ft.\n    - INDUS    proportion of non-retail business acres per town\n    - CHAS     Charles River dummy variable (\u003d 1 if tract bounds river; 0 otherwise)\n    - NOX      nitric oxides concentration (parts per 10 million)\n    - RM       average number of rooms per dwelling\n    - AGE      proportion of owner-occupied units built prior to 1940\n    - DIS      weighted distances to five Boston employment centres\n    - RAD      index of accessibility to radial highways\n    - TAX      full-value property-tax rate per `$10000`\n    - PTRATIO  pupil-teacher ratio by town\n    - B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\n    - LSTAT    % lower status of the population\n    - MEDV     Median value of owner-occupied homes in $1000\u0027s",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.354",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eBoston Data. Attribute Information (in order):\u003cbr/\u003e - CRIM per capita crime rate by town\u003cbr/\u003e - ZN proportion of residential land zoned for lots over 25,000 sq.ft.\u003cbr/\u003e - INDUS proportion of non-retail business acres per town\u003cbr/\u003e - CHAS Charles River dummy variable (\u003d 1 if tract bounds river; 0 otherwise)\u003cbr/\u003e - NOX nitric oxides concentration (parts per 10 million)\u003cbr/\u003e - RM average number of rooms per dwelling\u003cbr/\u003e - AGE proportion of owner-occupied units built prior to 1940\u003cbr/\u003e - DIS weighted distances to five Boston employment centres\u003cbr/\u003e - RAD index of accessibility to radial highways\u003cbr/\u003e - TAX full-value property-tax rate per \u003ccode\u003e$10000\u003c/code\u003e\u003cbr/\u003e - PTRATIO pupil-teacher ratio by town\u003cbr/\u003e - B 1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\u003cbr/\u003e - LSTAT % lower status of the population\u003cbr/\u003e - MEDV Median value of owner-occupied homes in $1000\u0026rsquo;s\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688354_1209415015",
      "id": "20230129-091448_166705786",
      "dateCreated": "2023-01-29 09:14:48.354",
      "status": "READY"
    },
    {
      "text": "%python\ndef prepare_boston_data_new():\n    data \u003d load_boston()\n    X, y \u003d data[\u0027data\u0027], data[\u0027target\u0027]\n    \n    X \u003d np.hstack([X, np.sqrt(X[:, 5:6]), X[:, 6:7] ** 3])\n    \n    # Нормализовать даннные с помощью стандартной нормализации\n    X \u003d (X - X.mean(axis\u003d0)) / X.std(axis\u003d0)\n    # Добавить фиктивный столбец единиц (bias линейной модели)\n    X \u003d np.hstack([np.ones(X.shape[0])[:, np.newaxis], X])\n    \n    return X, y",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.355",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688355_1370027518",
      "id": "20230129-091448_265571788",
      "dateCreated": "2023-01-29 09:14:48.355",
      "status": "READY"
    },
    {
      "text": "%md\nМы добавили два новых признака:\n1. Взяли корень из признака RM (среднее число комнат на сожителя)\n1. Возвели в куб значения признака AGE\n\nЭто только два примера. Всевозможных комбинаций признаков и примененных к ним функций неограниченное количество.",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.355",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eМы добавили два новых признака:\u003cbr/\u003e1. Взяли корень из признака RM (среднее число комнат на сожителя)\u003cbr/\u003e1. Возвели в куб значения признака AGE\u003c/p\u003e\n\u003cp\u003eЭто только два примера. Всевозможных комбинаций признаков и примененных к ним функций неограниченное количество.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688355_1300260077",
      "id": "20230129-091448_335706935",
      "dateCreated": "2023-01-29 09:14:48.355",
      "status": "READY"
    },
    {
      "text": "%python\ndef train_validate(X, y):\n    # Разбить данные на train/valid\n    X_train, X_valid, y_train, y_valid \u003d train_test_split(X, y, test_size\u003d0.2, shuffle\u003dTrue, random_state\u003d1)\n\n    # Создать и обучить линейную регрессию\n    linreg_alg \u003d LinRegAlgebra()\n    linreg_alg.fit(X_train, y_train)\n\n    # Сделать предсказания по валидционной выборке\n    y_pred \u003d linreg_alg.predict(X_valid)\n\n    # Посчитать значение ошибок MSE и RMSE для валидационных данных\n    print_regression_metrics(y_valid, y_pred)",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.355",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688355_1009972688",
      "id": "20230129-091448_1161058088",
      "dateCreated": "2023-01-29 09:14:48.355",
      "status": "READY"
    },
    {
      "text": "%python\n# Подготовить данные без модификации признаков\nX, y \u003d prepare_boston_data()\n# Провести эксперимент\ntrain_validate(X, y)",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.355",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "MSE \u003d 23.38, RMSE \u003d 4.84\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688355_41883306",
      "id": "20230129-091448_838601118",
      "dateCreated": "2023-01-29 09:14:48.355",
      "status": "READY"
    },
    {
      "text": "%python\n# Подготовить данные без модификации признаков\nX, y \u003d prepare_boston_data_new()\n# Провести эксперимент\ntrain_validate(X, y)",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.355",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "MSE \u003d 14.28, RMSE \u003d 3.78\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688355_1455327433",
      "id": "20230129-091448_485197888",
      "dateCreated": "2023-01-29 09:14:48.355",
      "status": "READY"
    },
    {
      "text": "%md\nКак видно из результатов, мы добились улучшения точности предсказаний на 40%, всего лишь добавив пару нелинейных признаков в имеющимся. Можете поиграть с признаками и еще улучшить результат.",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.356",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eКак видно из результатов, мы добились улучшения точности предсказаний на 40%, всего лишь добавив пару нелинейных признаков в имеющимся. Можете поиграть с признаками и еще улучшить результат.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688356_1208654248",
      "id": "20230129-091448_465015593",
      "dateCreated": "2023-01-29 09:14:48.356",
      "status": "READY"
    },
    {
      "text": "%python\n",
      "user": "anonymous",
      "dateUpdated": "2023-01-29 09:14:48.356",
      "progress": 0,
      "config": {
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674983688356_1633321046",
      "id": "20230129-091448_2094864992",
      "dateCreated": "2023-01-29 09:14:48.356",
      "status": "READY"
    }
  ],
  "name": "ML_LinearReg_efficiencyTests",
  "id": "2HQ583PRA",
  "defaultInterpreterGroup": "spark",
  "version": "0.10.1",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}